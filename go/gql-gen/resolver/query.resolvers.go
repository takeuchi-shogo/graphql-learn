package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"errors"
	"fmt"

	"github.com/takeuchi-shogo/graphql-learn/go/gql-gen/generated/model"
	"github.com/takeuchi-shogo/graphql-learn/go/gql-gen/graph"
	errorsPkg "github.com/takeuchi-shogo/graphql-learn/go/gql-gen/pkg/errors"
	"github.com/takeuchi-shogo/graphql-learn/go/gql-gen/repository"
	todoService "github.com/takeuchi-shogo/graphql-learn/go/gql-gen/service/todo"
	"github.com/takeuchi-shogo/graphql-learn/go/gql-gen/utils"
)

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, first *int32, after *string, last *int32, before *string, isReverse *bool, status *model.TodoStatus) (*model.TodoConnection, error) {
	var userErrors []*model.UserError
	todoRepository := repository.NewTodoRepository()
	svc := todoService.NewGetTodoListService(todoRepository)
	todos, err := svc.GetTodoList(ctx, todoService.NewGetTodoListInput(first, after, last, before, isReverse))
	if err != nil {
		if err.Error() == "todoRepository is nil" {
			return nil, errors.New("todoRepository is nil")
		} else if errors.Is(err, errorsPkg.ErrMessageUserNotFound) {
			userErrors = append(userErrors, &model.UserError{
				Message: errorsPkg.ErrMessageUserNotFound.Error(),
				Path:    []string{"todos"},
				Code:    errorsPkg.ErrCodeUserNotFound,
			})
		} else {
			return nil, err
		}
	}
	return utils.CreateTodoConnection(todos, userErrors), nil
}

// TodoByID is the resolver for the todoById field.
func (r *queryResolver) TodoByID(ctx context.Context, id string) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: TodoByID - todoById"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
